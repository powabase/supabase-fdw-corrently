name: Release WASM FDW

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required for creating releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain (modern approach - replaces actions-rs/toolchain)
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      # Cache cargo registry, git dependencies, and build artifacts
      # Saves 2-5 minutes on subsequent builds
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "wasm-release"
          cache-on-failure: true

      # Install cargo-component using pre-built binary (faster than cargo install)
      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component@0.21.1

      # Install wasm-tools for validation
      - name: Install wasm-tools
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-tools

      # Build optimized WASM binary
      - name: Build WASM binary
        run: |
          echo "Building WASM binary with target: wasm32-unknown-unknown"
          cargo component build --release --target wasm32-unknown-unknown
          ls -lh target/wasm32-unknown-unknown/release/corrently_fdw.wasm

      # Validate WASM structure (CRITICAL: prevent WASI import bugs)
      - name: Validate WASM structure
        run: |
          echo "Validating WASM binary..."

          # Validate WASM is well-formed
          wasm-tools validate target/wasm32-unknown-unknown/release/corrently_fdw.wasm

          # CRITICAL: Check for WASI CLI imports (should be ZERO)
          echo "Checking for WASI CLI imports (expecting: none)..."
          WASI_CLI_COUNT=$(wasm-tools component wit target/wasm32-unknown-unknown/release/corrently_fdw.wasm | grep -c "wasi:cli" || echo "0")

          if [ "$WASI_CLI_COUNT" -gt 0 ]; then
            echo "❌ ERROR: Found $WASI_CLI_COUNT WASI CLI imports!"
            echo "This means you built with wasm32-wasip1 instead of wasm32-unknown-unknown"
            echo "Supabase Wrappers doesn't provide WASI CLI interfaces - build will fail"
            wasm-tools component wit target/wasm32-unknown-unknown/release/corrently_fdw.wasm | grep wasi:cli
            exit 1
          fi

          echo "✅ WASM validation passed - zero WASI CLI imports"

          # Show imports for verification
          echo "WASM imports:"
          wasm-tools component wit target/wasm32-unknown-unknown/release/corrently_fdw.wasm | head -15

      # Check binary size
      - name: Check binary size
        id: size
        run: |
          SIZE=$(stat -c%s target/wasm32-unknown-unknown/release/corrently_fdw.wasm 2>/dev/null || stat -f%z target/wasm32-unknown-unknown/release/corrently_fdw.wasm)
          SIZE_KB=$((SIZE / 1024))
          echo "size_kb=$SIZE_KB" >> $GITHUB_OUTPUT
          echo "Binary size: ${SIZE_KB} KB"

          if [ $SIZE_KB -gt 150 ]; then
            echo "⚠️  WARNING: Binary size ($SIZE_KB KB) is larger than expected"
            echo "Expected: ~106 KB. Check build optimizations in Cargo.toml"
          else
            echo "✅ Binary size within expected range"
          fi

      # Calculate SHA256 checksum
      - name: Calculate SHA256 checksum
        id: checksum
        run: |
          cd target/wasm32-unknown-unknown/release

          # Calculate checksum (cross-platform)
          if command -v sha256sum > /dev/null; then
            CHECKSUM=$(sha256sum corrently_fdw.wasm | awk '{print $1}')
          else
            CHECKSUM=$(shasum -a 256 corrently_fdw.wasm | awk '{print $1}')
          fi

          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "$CHECKSUM  corrently_fdw.wasm" > corrently_fdw.wasm.sha256

          echo "SHA256 checksum: $CHECKSUM"

          # Also create checksums.txt for compatibility
          echo "SHA256 Checksums" > checksums.txt
          echo "================" >> checksums.txt
          echo "" >> checksums.txt
          echo "$CHECKSUM  corrently_fdw.wasm" >> checksums.txt

      # Get version from tag
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/wasm32-unknown-unknown/release/corrently_fdw.wasm
            target/wasm32-unknown-unknown/release/corrently_fdw.wasm.sha256
            target/wasm32-unknown-unknown/release/checksums.txt
          generate_release_notes: true
          body: |
            ## Corrently GrünstromIndex WASM FDW ${{ steps.version.outputs.version }}

            **Binary:** ${{ steps.size.outputs.size_kb }} KB | **SHA256:** `${{ steps.checksum.outputs.checksum }}`

            ### Endpoints

            1 production-ready endpoint: **gsi_prediction** (16 columns - hourly green energy forecasting)

            ---

            ### Quick Start

            ```sql
            -- Create foreign server
            CREATE SERVER corrently_server
              FOREIGN DATA WRAPPER wasm_wrapper
              OPTIONS (
                fdw_package_url 'https://github.com/powabase/supabase-fdw-corrently/releases/download/${{ steps.version.outputs.version }}/corrently_fdw.wasm',
                fdw_package_name 'powabase:supabase-fdw-corrently',
                fdw_package_version '${{ steps.version.outputs.version }}',
                fdw_package_checksum '${{ steps.checksum.outputs.checksum }}',
                api_url 'https://api.corrently.io'
              );

            -- Create schema
            CREATE SCHEMA fdw_corrently;

            -- Create foreign table (v0.2.0 schema)
            CREATE FOREIGN TABLE fdw_corrently.gsi_prediction (
              forecast_start_time timestamp with time zone,
              forecast_period_start timestamp with time zone,
              forecast_period_end timestamp with time zone,
              green_energy_index numeric,
              renewable_energy_pct bigint,
              wind_energy_pct bigint,
              solar_energy_pct bigint,
              net_wind_energy_pct bigint,
              net_solar_energy_pct bigint,
              smart_city_index bigint,
              energy_price_eur_kwh numeric,
              co2_baseline_g_kwh numeric,
              standard_mix_co2_g_kwh bigint,
              green_mix_co2_g_kwh bigint,
              postal_code text,
              forecast_created_at timestamp with time zone
            )
            SERVER corrently_server
            OPTIONS (object 'gsi_prediction');

            -- Query example (German postal code)
            SELECT
              forecast_start_time,
              green_energy_index,
              renewable_energy_pct,
              energy_price_eur_kwh,
              standard_mix_co2_g_kwh
            FROM fdw_corrently.gsi_prediction
            WHERE postal_code = '69168'
            ORDER BY forecast_start_time
            LIMIT 10;
            ```

            **📖 Full Setup:** See [QUICKSTART.md](https://github.com/powabase/supabase-fdw-corrently/blob/main/QUICKSTART.md) for complete installation instructions.

            ---

            ### Documentation

            - **[README](https://github.com/powabase/supabase-fdw-corrently/blob/main/README.md)** - Project overview
            - **[QUICKSTART](https://github.com/powabase/supabase-fdw-corrently/blob/main/QUICKSTART.md)** - 3-minute setup guide
            - **[MIGRATION](https://github.com/powabase/supabase-fdw-corrently/blob/main/MIGRATION.md)** - Upgrade guide from v0.1.0
            - **[CLAUDE](https://github.com/powabase/supabase-fdw-corrently/blob/main/CLAUDE.md)** - Development guide
            - **[Endpoint Documentation](https://github.com/powabase/supabase-fdw-corrently/blob/main/docs/endpoints/gsi-prediction.md)** - Complete endpoint reference

            ---

            **Built with:** Rust 1.90+, cargo-component 0.21.1, wasm32-unknown-unknown | **Validated:** Zero WASI CLI imports ✅
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
